# author: Плуталов Максим Александрович

# Задание №1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа
# данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать
# у пользователя, а указать явно, в программе.

i = 2105
f = 0.789
l = [-2105]
s = "простая строка"
d = {"Имя": "Владислав", "Фамилия": "Николаев"}
list_1 = [i, f, l, s, d]
for i in list_1:
    print(type(i))

# Задание №2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются
# элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний
# сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().

el_count = int(input("Введите количество элементов списка: "))
my_list = []
i = 0
el = 0
while i < el_count:
    my_list.append(input("Введите следующий элемент списка: "))
    i += 1

for elem in range(int(len(my_list) / 2)):
    my_list[el], my_list[el + 1] = my_list[el + 1], my_list[el]
    el += 2
print("Полученный список:", my_list)

# Задание №3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

month = int(input("Введите месяц по номеру в году:  "))
a_list = [" ", "Время года Зима", "Время года Зима", "Время года Весна", "Время года Весна", "Время года Весна",
          "Время года Лето", "Время года Лето", "Время года Лето", "Время года Осень", "Время года Осень",
          "Время года Осень", "Время года Зима"]
print(a_list[month])

# Задание №4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

my_str = input("Введите строку: ")
a = my_str.split()
for i, el in enumerate(a, 1):
    if len(el) > 10:
        el = el[0:10]
    print(i, el[:10])

# Задание №5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми
# значениями, то новый элемент с тем же значением должен разместиться после них.

number = int(input("Введите новый элемент: "))
my_list = [7, 5, 3, 3, 2]
c = my_list.count(number)
for element in my_list:
    if c > 0:
        i = my_list.index(number)
        my_list.insert(i+c, number)
        break
    else:
        if number > element:
            j = my_list.index(element)
            my_list.insert(j, number)
            break
        elif number < my_list[len(my_list) - 1]:
            my_list.append(number)
print(my_list)

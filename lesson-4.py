# author: Плуталов Максим Александрович

#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

script_name, time, salary, bonus = argv

time = int(time)
salary = int(salary)
bonus = int(bonus)
res = time * salary + bonus
print('Заработная плата сотрудника: ', res)

# Для запуска скрипта ввести в Terminal например: python lesson-4.py 8 3490 2490

#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [el for num, el in enumerate(my_list) if my_list[num - 1] < my_list[num]]
print(f"Исходный список: {my_list}")
print(f"Новый список: {new_list}")

#Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
#Подсказка: использовать функцию range() и генератор.

print(f'Числа от 20 до 240 кратные 20 или 21 - {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')


#3. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их
# следования в исходном списке. Для выполнения задания обязательно использовать генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in my_list if my_list.count(el) < 2]
print(new_list)


#4. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

from functools import reduce

my_list = [el for el in range(100, 1001, 2)]
print(my_list)

def my_func(prev_el, el):
    return prev_el * el
print(reduce(my_func, my_list))

#5. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного:

from itertools import count

for el in count(3):
    if el > 10:
        break
    else:
        print(el)

# б) итератор, повторяющий элементы некоторого списка, определенного заранее:

from itertools import cycle

с = 0
for el in cycle("Квадратный"):
    if с > 9:
        break
    print(el)
    с += 1

#6. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count
from math import factorial

def generator():
    for el in count(1):
        yield factorial(el)

gen = generator()
x = 0
n = int(input('Введите факториал числа: '))
for i in gen:
    if x < n:
        print(i)
        x += 1
    else:
        break
